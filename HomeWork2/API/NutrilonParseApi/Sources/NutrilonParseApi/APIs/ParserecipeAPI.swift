//
// ParserecipeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ParserecipeAPI {
    /**
     GetRecipe
     
     - parameter rurl: (query) URL 
     - parameter xRapidapiHost: (header)  (optional)
     - parameter xRapidapiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecipe(requestUrl: String, xRapidapiHost: String? = nil, xRapidapiKey: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ParsedRecipe?,_ error: Error?) -> Void)) {
        getRecipeWithRequestBuilder(requestUrl: requestUrl, xRapidapiHost: xRapidapiHost, xRapidapiKey: xRapidapiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetRecipe
     - GET /recipes/extract
     - parameter rurl: (query) URL 
     - parameter xRapidapiHost: (header)  (optional)
     - parameter xRapidapiKey: (header)  (optional)
     - returns: RequestBuilder<ParsedRecipe> 
     */
    open class func getRecipeWithRequestBuilder(requestUrl: String, xRapidapiHost: String? = nil, xRapidapiKey: String? = nil) -> RequestBuilder<ParsedRecipe> {
        let path = "/recipes/extract"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "url": requestUrl.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-rapidapi-host": xRapidapiHost?.encodeToJSON(),
            "x-rapidapi-key": xRapidapiKey?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ParsedRecipe>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
